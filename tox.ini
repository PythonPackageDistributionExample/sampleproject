[tox]
minversion = 3.25.0
#isolated_build = true
#skipdist = true
ignore_basepython_conflict = true
# these are the environments that will run when you
# execute `tox` in the command-line
# bellow you will find explanations for all environments
envlist =
    build
    docs
    test
    lint
    pr

# configures which environments run with each python version
# the current configuration has the 'test' enviroment. This will run the
# unit test for running python version. It is not needed to state the python
# version because the installation process already ensures only supported
# versions are installed
[testenv]
basepython =
    {pr,test,build,docs,lint,radon,safety}: {env:TOXPYTHON:python3}
passenv = *

# configures the unittest environment for python 3.6
[testenv:test]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
usedevelop = true
# installs dependencies we need for testing
# by using tox, developers don't need to manage project's dependencies
# for unit testing
deps =
    # -r{toxinidir}/requirements.txt
    coverage
    pytest
    pytest-cov
    hypothesis
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post = 
    coverage report
    coverage html
    coverage xml

# in previous verions, I had independent environments to manage the
# coverage reports. However, I found that doing such as pre and post
# commands facilitates many configuration details

[testenv:pr]
# these commands cannot be in the [testenv:build] because they will trigger
# after the versionbump which commit has different characteristics of the PR
skip_install = true
commands =
    python {toxinidir}/devtools/check_changelog.py


# separates lint from build env
[testenv:lint]
deps =
    flake8>=4
    flake8-print>=5
    flake8-docstrings
    flake8-bugbear
    Flake8-pyproject
    pygments
    isort
skip_install = true
commands =
    flake8 {posargs:src tests docs}
    isort --verbose --check-only --diff {posargs:src tests docs/conf.py}

# asserts package build integrity
[testenv:build]
skip_install = true
# setenv here integrates with commit message in .bumpversion.cfg
# we can tests bump2version with an actual commit
setenv =
    COMMIT_MSG=Test commit message
# dependencies needed for code quality checks
# you need to add here any additional dependencies you might need
deps =
    twine
    check-manifest
    bump2version
    build
commands_pre = python {toxinidir}/devtools/clean_dist_check.py

# note as of 2023/02/11 the build command is different for windows and unix:
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#generating-distribution-archives
commands =
    python --version
    python -m build
    twine check dist/*.whl
    twine check dist/*.tar.gz
    check-manifest {toxinidir}
    bump2version --dry-run --verbose --allow-dirty patch
    bump2version --dry-run --verbose --allow-dirty minor
    bump2version --dry-run --verbose --allow-dirty major
commands_post = python {toxinidir}/devtools/clean_dist_check.py

# code quality assessment. This is not a check in the CI, serves just
# as info for the developer
[testenv:radon]
deps = radon
skip_install = true
commands = 
    radon cc -s --total-average --no-assert {posargs:src/}
    radon mi -m -s {posargs:src/}

# Simulate docs building as it will occur on ReadTheDocs
# if this fails, most likely RTD build will fail
[testenv:docs]
usedevelop = true
deps =
    -r{toxinidir}/devtools/docs_requirements.txt
commands =
    sphinx-build {posargs:-E} -b html docs dist/docs
    #sphinx-build -b linkcheck docs dist/docs

# safety checks
[testenv:safety]
skip_install = true
deps = safety
commands = safety check
